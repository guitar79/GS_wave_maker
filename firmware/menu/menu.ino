#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Arduino.h"
#include "TeensyStep.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

//버튼
const int stepPin = 16;
const int dirPin  = 15;
const int slpPin  = 17;
const int rstPin  = 7;
const int faultPin = 14;

const int rightPin = 11;
const int leftPin = 9;
const int upPin = 10;
const int downPin = 12;
const int MenuMax = 5;

//이름
String menu[300];
int SelectedNum = 0;
int MenuNum[300];
int CurrentPage = 0;
int buttondel = 0;
//모터 관련
Stepper motor(stepPin, dirPin);
RotateControl rotatecontrol;
//파 관련
boolean waveset = false;
elapsedMillis timer = 0;
elapsedMillis intervalTimer = 0;

float MaxSpeed = 30000;
float Acceleration = 30000;

//리미트핀

const int lmtPin1 = 22;
const int lmtPin2 = 21;
boolean previousInit = false;

int leftEnd = 0;
int rightEnd = 0;
int MID = 0;


unsigned char codingarray [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x01, 0xff, 0xe0, 0xe0, 0xcf, 0x38, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x00, 0x7f, 0x8f, 0xcf, 0xcf, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x3f, 0xf8, 0x1f, 0x9f, 0xc7, 0xcf, 0x31, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0xff, 0xfe, 0x0f, 0x18, 0x70, 0xc0, 0x3c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xc3, 0xff, 0xff, 0x87, 0x9e, 0x7c, 0xcf, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x87, 0xc0, 0x0f, 0xc3, 0xc4, 0x4c, 0xcf, 0x36, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x8e, 0x00, 0x00, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x08, 0x9f, 0xfe, 0x61, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x01, 0xbf, 0xf9, 0x21, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x03, 0x3f, 0xf9, 0x21, 0x07, 0x8e, 0x1f, 0xff, 0xff, 0xff, 0xe7, 0x1f, 0xfc, 0xff, 0xff, 0xff, 
  0x09, 0xbf, 0xf9, 0x20, 0x33, 0x0c, 0x7f, 0xff, 0xff, 0xff, 0xc4, 0x3f, 0xf8, 0xff, 0xff, 0xff, 
  0x08, 0xff, 0xf0, 0x60, 0x73, 0x08, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xf9, 0xff, 0xff, 0xff, 
  0x86, 0x00, 0x00, 0xc2, 0x12, 0x59, 0xe0, 0xd9, 0x0f, 0xf0, 0x90, 0x70, 0x72, 0x61, 0x83, 0xff, 
  0xc3, 0xc0, 0x07, 0x87, 0x10, 0xc3, 0xc9, 0x90, 0x4f, 0xc0, 0x1c, 0xe6, 0x70, 0xc9, 0x07, 0xff, 
  0xc1, 0xff, 0xff, 0x0f, 0xf0, 0x87, 0x99, 0x86, 0x1f, 0x9f, 0x38, 0xe4, 0xe0, 0xc1, 0xcf, 0xff, 
  0xf0, 0x7f, 0xfc, 0x1f, 0xf1, 0x8f, 0x80, 0x8e, 0x0f, 0x1e, 0x78, 0x20, 0x0e, 0x40, 0xc3, 0xff, 
  0xf8, 0x07, 0xc0, 0x3f, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0x1c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.display();
  
  motor.setMaxSpeed(MaxSpeed);
  motor.setAcceleration(Acceleration);
  
  pinMode(rightPin,INPUT_PULLUP);
  pinMode(leftPin,INPUT_PULLUP);
  pinMode(upPin,INPUT_PULLUP);
  pinMode(downPin,INPUT_PULLUP);
  
  pinMode(slpPin, OUTPUT);
  pinMode(rstPin, OUTPUT);

  //
  pinMode(lmtPin1,INPUT);
  pinMode(lmtPin2,INPUT);
  //
  digitalWrite(slpPin, HIGH);
  digitalWrite(rstPin, HIGH);
  
  menu[1] = "Wave";
  menu[NUM(0)] = " Regular";
  
  menu[NUM(0,0)] = " Sin Wave";
  menu[NUM(0,0,0)] = " 0.8PI";
  menu[NUM(0,0,1)] = " 1.0PI";
  menu[NUM(0,0,2)] = " 1.2PI";
  menu[NUM(0,0,3)] = " 1.4PI";
  menu[NUM(0,0,4)] = " 2.0PI";


  
  menu[NUM(1)] = " Irregular";
  menu[NUM(1,0)] = " Tsunami";
  
  menu[NUM(2)] = " Button";
  
  MenuNum[1] = 3; 
  MenuNum[NUM(0)] = 1; 
  MenuNum[NUM(1)] = 1; 
  MenuNum[NUM(0,0)] = 5;
  while (!Serial && millis() < 1000);
  rotatecontrol.rotateAsync(motor);
  rotatecontrol.overrideSpeed(0);
}

void loop(){
  if(CurrentPage==0){
    startpage();
  }
  if(CurrentPage>=1){
    page();
  }
}




//Wave Maker LOGO
